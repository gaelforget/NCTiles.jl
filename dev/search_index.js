var documenterSearchIndex = {"docs":
[{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"EditURL = \"https://github.com/gaelforget/NCTiles.jl/blob/master/examples/Example6.jl\"","category":"page"},{"location":"generated/Example6/#Example-6-:-Climatological-Mean","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"","category":"section"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"An example of one tile with a climatology time axis from the global ocean domain available in https://github.com/gaelforget/nctiles-testcases","category":"page"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"using NCTiles,NCDatasets","category":"page"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"File Paths","category":"page"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"inputs=NCTiles.NCTILES_TESTCASES\nNCTiles.ensure_testcases_installed()\n\noutputs = joinpath(tempdir(),\"NCTILES_TESTCASES_OUTPUT/\")\nif ~ispath(outputs); mkpath(outputs); end\n\nsavedir = joinpath(outputs,\"ex6\")\nif ~ispath(savedir); mkpath(savedir); end\n\nfield_name = \"FeT\"\nREADME = [field_name*\" -- Source: Gael Forget; version: alpha.\"];\nnothing #hide","category":"page"},{"location":"generated/Example6/#One-tile-example","page":"Example 6 : Climatological Mean","title":"One tile example","text":"","category":"section"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"ncvars,ncdims,fileatts = readncfile(joinpath(inputs,\"diags_nctiles/FeT.0062.nc\"))\nrm(joinpath(savedir,\"ex6a.nc\"),force=true)\nwrite(ncvars,joinpath(savedir,\"ex6a.nc\"),README=README)","category":"page"},{"location":"generated/Example6/#Define-Dimensions","page":"Example 6 : Climatological Mean","title":"Define Dimensions","text":"","category":"section"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"For reference:","category":"page"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"- i_c: NCvar(\"i_c\", \"1\", 30, 1.0:30.0, Dict(\"units\" => \"1\",\"long_name\" => \"Cartesian coordinate 1\"), NCDatasets)\n- j_c: NCvar(\"j_c\", \"1\", 30, 1.0:30.0, Dict(\"units\" => \"1\",\"long_name\" => \"Cartesian coordinate 2\"), NCDatasets)\n- k_c: NCvar(\"k_c\", \"1\", 50, 1.0:50.0, Dict(\"units\" => \"1\",\"long_name\" => \"Cartesian coordinate 3\"), NCDatasets)\n- t:   NCvar(\"t\", \"1\", 12, 1.0:12.0, Dict(\"units\" => \"1\",\"long_name\" => \"Time coordinate\"), NCDatasets)\n- tcb:  NCvar(\"tcb\", \"\", 2, Any[], Dict{Any,Any}(), NCDatasets)","category":"page"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"Note : tcb is unitles, only has a dimension, no values","category":"page"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"FeT_dims = [ncdims[\"i_c\"],\n                ncdims[\"j_c\"],\n                ncdims[\"k_c\"],\n                ncdims[\"t\"]]\nclim_dims = [ncdims[\"tcb\"],\n                ncdims[\"t\"]]","category":"page"},{"location":"generated/Example6/#Define-Variables","page":"Example 6 : Climatological Mean","title":"Define Variables","text":"","category":"section"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"Note : lat, lon, dep, tim, thic, area, land defined same as non-climatology example","category":"page"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"FeT = NCvar(\"FeT\", # name\n                \"mmol Fe\", # units\n                FeT_dims, # dimensions\n                NCData(joinpath(inputs,\"diags_nctiles/FeT.0062.nc\"), \"FeT\", NCDatasets, Float32), # values- to be read from file\n                Dict(\"coordinates\" => \"lon lat dep tim\",\"long_name\" => \"FeT concentration\"), # attributes\n                NCDatasets) # backend\n\nclimatology_bounds = NCvar(\"climatology_bounds\", # name\n                                \"days since 1992-1-1 0:0:0\", # units\n                                clim_dims, # dimensions\n                                NCData(joinpath(inputs,\"diags_nctiles/FeT.0062.nc\"), \"climatology_bounds\", NCDatasets, Float32), # values- to be read from file\n                                Dict(\"long_name\" => \"climatology_bounds\"), # attributes\n                                ncvars[\"climatology_bounds\"].backend) # backend","category":"page"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"Write to file","category":"page"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"writevars = Dict([\"FeT\" => FeT,\n                \"lon\" => ncvars[\"lon\"],\n                \"lat\" => ncvars[\"lat\"],\n                \"dep\" => ncvars[\"dep\"],\n                \"tim\" => ncvars[\"tim\"],\n                \"thic\" => ncvars[\"thic\"],\n                \"area\" => ncvars[\"area\"],\n                \"land\" => ncvars[\"land\"],\n                \"climatology_bounds\" => climatology_bounds])\nrm(joinpath(savedir,\"ex6b.nc\"),force=true)\nwrite(writevars,joinpath(savedir,\"ex6b.nc\"),README=README)","category":"page"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"","category":"page"},{"location":"generated/Example6/","page":"Example 6 : Climatological Mean","title":"Example 6 : Climatological Mean","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"EditURL = \"https://github.com/gaelforget/NCTiles.jl/blob/master/examples/Example1.jl\"","category":"page"},{"location":"generated/Example1/#Example-1-:-Regular-Grid","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"","category":"section"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"two-dimensional fields on a regular longitude,latitude grid are retrieved from binary files\nthey are then written to a new netcdf file using NCTiles.write()","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"This example illustrates the use of either NCDatasets.jl or NetCDF.jl as the backend.","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"using NCTiles, NCDatasets, NetCDF","category":"page"},{"location":"generated/Example1/#File-Paths","page":"Example 1 : Regular Grid","title":"File Paths","text":"","category":"section"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"inputs=NCTiles.NCTILES_TESTCASES\nNCTiles.ensure_testcases_installed()\n\noutputs = joinpath(tempdir(),\"NCTILES_TESTCASES_OUTPUT/\")\nif ~ispath(outputs); mkpath(outputs); end\n\nselectfields = [\"ETAN\"]\nindir = joinpath(inputs,\"diags_interp\",selectfields[1])\nfnames = joinpath.(Ref(indir),filter(x -> occursin(\".data\",x), readdir(indir)))\n\nsavedir = joinpath(outputs,\"ex1\")\nif ~ispath(savedir); mkpath(savedir); end","category":"page"},{"location":"generated/Example1/#Grid-specifications-and-Metadata","page":"Example 1 : Regular Grid","title":"Grid specifications & Metadata","text":"","category":"section"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"prec = Float32\nREADME = readlines(joinpath(inputs,\"README\"))\nlon=-179.75:0.5:179.75; lat=-89.75:0.5:89.75;\nn1,n2 = (length(lon),length(lat))\ntim_units = \"days since 1992-01-01\"\ntim = vec([14.0 45.0 74.0])\nlongname = \"Surface Height Anomaly\"\nunits = \"m\"","category":"page"},{"location":"generated/Example1/#.-Using-NCDatasets.jl-As-The-Backend","page":"Example 1 : Regular Grid","title":"1. Using NCDatasets.jl As The Backend","text":"","category":"section"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"Define Dimensions as NCvars","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"dims = [NCvar(\"lon_c\",\"degrees_east\",size(lon),lon,Dict(\"long_name\" => \"longitude\"),NCDatasets),\n        NCvar(\"lat_c\",\"degrees_north\",size(lat),lat,Dict(\"long_name\" => \"latitude\"),NCDatasets),\n        NCvar(\"tim\",tim_units,Inf,tim,Dict((\"long_name\" => \"tim\",\"standard_name\" => \"time\")),NCDatasets)\n        ]","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"Define Variable Array as BinData","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"fielddata = BinData(fnames,prec,(n1,n2))\nfield = NCvar(selectfields[1],units,dims,fielddata,Dict(\"long_name\" => longname),NCDatasets)","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"Create the NetCDF file and populate with dimensions and variable","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"write(field,joinpath(savedir,\"ex1_NCDatasets.nc\"),README=README)","category":"page"},{"location":"generated/Example1/#.-Using-NetCDF.jl-As-The-Backend","page":"Example 1 : Regular Grid","title":"2. Using NetCDF.jl As The Backend","text":"","category":"section"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"Define Dimensions as NCvars","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"dims = [NCvar(\"lon_c\",\"degrees_east\",size(lon),lon,Dict(\"long_name\" => \"longitude\"),NetCDF),\n        NCvar(\"lat_c\",\"degrees_north\",size(lat),lat,Dict(\"long_name\" => \"latitude\"),NetCDF),\n        NCvar(\"tim\",tim_units,Inf,tim,Dict((\"long_name\" => \"time\",\"standard_name\" => \"time\")),NetCDF)\n        ]","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"Define Variable Array as BinData","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"fielddata = BinData(fnames,prec,(n1,n2))\nfield = NCvar(selectfields[1],units,dims,fielddata,Dict(\"long_name\" => longname),NetCDF)\n\nwrite(field,joinpath(savedir,\"ex1_NetCDF.nc\"),README=README)","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"Note: the write function is a shorthand for","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"# Create the NetCDF file and populate with dimension and field info, as well as dimension data\nncfile,fldvar,dimlist = createfile(joinpath(savedir,\"ex1_NetCDF.nc\"),field,README)\n\n# Add field data\naddData(fldvar,field)\n\n# Close the file-  only needed for NetCDF v < 0.10\nfinalize(ncfile)","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"","category":"page"},{"location":"generated/Example1/","page":"Example 1 : Regular Grid","title":"Example 1 : Regular Grid","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/Example4/","page":"Example 4 : Group Variables","title":"Example 4 : Group Variables","text":"EditURL = \"https://github.com/gaelforget/NCTiles.jl/blob/master/examples/Example4.jl\"","category":"page"},{"location":"generated/Example4/#Example-4-:-Group-Variables","page":"Example 4 : Group Variables","title":"Example 4 : Group Variables","text":"","category":"section"},{"location":"generated/Example4/","page":"Example 4 : Group Variables","title":"Example 4 : Group Variables","text":"Two variables (three-dimensional ones) are read from the netcdf files generated in Example3, combined into a single data structure, and then re-written together into a new netcdf file.","category":"page"},{"location":"generated/Example4/","page":"Example 4 : Group Variables","title":"Example 4 : Group Variables","text":"using NCTiles, NCDatasets\n\ninputs=NCTiles.NCTILES_TESTCASES\nNCTiles.ensure_testcases_installed()\noutputs = joinpath(tempdir(),\"NCTILES_TESTCASES_OUTPUT/\")\nnt=\"0003\"\n\nfile_in1=outputs*\"ex3/THETA/THETA.$nt.nc\"\nfile_in2=outputs*\"ex3/SALT/SALT.$nt.nc\"\n~isfile(file_in1) ? error(\"Running Example3 first is needed to run Example4\") : nothing\n\nfile_out=outputs*\"ex4/TS.$nt.nc\"\nif ~ispath(outputs*\"ex4/\"); mkpath(outputs*\"ex4/\"); end\n\nREADME = readlines(joinpath(inputs,\"README\"))","category":"page"},{"location":"generated/Example4/","page":"Example 4 : Group Variables","title":"Example 4 : Group Variables","text":"Get the first 3D variable","category":"page"},{"location":"generated/Example4/","page":"Example 4 : Group Variables","title":"Example 4 : Group Variables","text":"ncvars,ncdims,fileatts = readncfile(file_in1)","category":"page"},{"location":"generated/Example4/","page":"Example 4 : Group Variables","title":"Example 4 : Group Variables","text":"Add a second 3D variable","category":"page"},{"location":"generated/Example4/","page":"Example 4 : Group Variables","title":"Example 4 : Group Variables","text":"tmp,_,_ = readncfile(file_in2)\nT=ncvars[\"THETA\"]\nS=tmp[\"SALT\"]\nncvars[\"SALT\"]=NCvar(S.name,S.units,T.dims,S.values,S.atts,T.backend)","category":"page"},{"location":"generated/Example4/","page":"Example 4 : Group Variables","title":"Example 4 : Group Variables","text":"Rewrite to a new file","category":"page"},{"location":"generated/Example4/","page":"Example 4 : Group Variables","title":"Example 4 : Group Variables","text":"write(ncvars,file_out,README=README,globalattribs=fileatts)","category":"page"},{"location":"generated/Example4/","page":"Example 4 : Group Variables","title":"Example 4 : Group Variables","text":"","category":"page"},{"location":"generated/Example4/","page":"Example 4 : Group Variables","title":"Example 4 : Group Variables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/#Use-Examples","page":"Guide ","title":"Use Examples","text":"","category":"section"},{"location":"examples/","page":"Guide ","title":"Guide ","text":"Examples based on nctiles-testcases are found in the examples/ folder:","category":"page"},{"location":"examples/","page":"Guide ","title":"Guide ","text":"Example1.jl reads two-dimensional fields on a regular grid (\"lat-lon\") read from binary files, and then writes them to a netcdf file. This example illustrates the use of either NCDatasets.jl or NetCDF.jl as the backend.\nExample2.jl reads two-dimensional fields from the netcdf file generated in Example1, and then re-writes them to a new netcdf file.\nExample3.jl reads Global Ocean variables which are partitioned into subdomains and writes each one to a collection of NetCDF files ( nctiles ).\nExample4.jl reads two three-dimensional variables from the netcdf files generated in Example3, combines them into a single data structure, and then re-writes them together into a new netcdf file.\nExample5.jl writes a ClimArray struct from the ClimateBase.jl package to a netcdf file using NCTiles.jl, and vice versa.\nExample6.jl (Work In Progress) demonstrates the specification of a climatological time axis.","category":"page"},{"location":"examples/","page":"Guide ","title":"Guide ","text":"Another series of examples is provided in DataStructures/03_nctiles.ipynb within GlobalOceanNotebooks.","category":"page"},{"location":"generated/Example3/","page":"Example 3 : Tiled Domain","title":"Example 3 : Tiled Domain","text":"EditURL = \"https://github.com/gaelforget/NCTiles.jl/blob/master/examples/Example3.jl\"","category":"page"},{"location":"generated/Example3/#Example-3-:-Tiled-Domain","page":"Example 3 : Tiled Domain","title":"Example 3 : Tiled Domain","text":"","category":"section"},{"location":"generated/Example3/","page":"Example 3 : Tiled Domain","title":"Example 3 : Tiled Domain","text":"This example first reads in Global Ocean variables, generated by the MITgcm, which are split into a collection of subdomain arrays ( tiles ) using MeshArrays.jl. It then writes them to a collection of NetCDF files ( nctiles ) using NCTiles.jl.","category":"page"},{"location":"generated/Example3/#Packages-and-Helper-Functions","page":"Example 3 : Tiled Domain","title":"Packages & Helper Functions","text":"","category":"section"},{"location":"generated/Example3/","page":"Example 3 : Tiled Domain","title":"Example 3 : Tiled Domain","text":"using NCTiles;\n\np=dirname(pathof(NCTiles))\nfil = joinpath(p, \"../examples/helper_functions.jl\")\ninclude(fil);\nnothing #hide","category":"page"},{"location":"generated/Example3/#File-Paths-and-I/O-Back-End","page":"Example 3 : Tiled Domain","title":"File Paths & I/O Back-End","text":"","category":"section"},{"location":"generated/Example3/","page":"Example 3 : Tiled Domain","title":"Example 3 : Tiled Domain","text":"inputs=NCTiles.NCTILES_TESTCASES\nNCTiles.ensure_testcases_installed()\n\noutputs = joinpath(tempdir(),\"NCTILES_TESTCASES_OUTPUT/ex3/\")\nif ~ispath(outputs); mkpath(outputs); end\n\nnc=NCTiles.NCDatasets # I/O Back-End","category":"page"},{"location":"generated/Example3/#Process-Global-Ocean-Variables","page":"Example 3 : Tiled Domain","title":"Process Global Ocean Variables","text":"","category":"section"},{"location":"generated/Example3/","page":"Example 3 : Tiled Domain","title":"Example 3 : Tiled Domain","text":"Here we process a two-dimensional field (ETAN), two three-dimensional tracer fields (THETA, SALT), and the three components of a vector field (UVELMASS, VVELMASS and WVELMASS). In each case, flds denotes the lazy representation of the processing chain (incl. all needed metadata) which the write function instantiates (i.e. outputs to files).","category":"page"},{"location":"generated/Example3/","page":"Example 3 : Tiled Domain","title":"Example 3 : Tiled Domain","text":"Note: on a C-grid these components are staggered in space.","category":"page"},{"location":"generated/Example3/","page":"Example 3 : Tiled Domain","title":"Example 3 : Tiled Domain","text":"writedir=outputs\nreadme = readlines(inputs)","category":"page"},{"location":"generated/Example3/#D-example","page":"Example 3 : Tiled Domain","title":"2D example","text":"","category":"section"},{"location":"generated/Example3/","page":"Example 3 : Tiled Domain","title":"Example 3 : Tiled Domain","text":"(flds,savename,readme)=prep_nctiles_native(inputs,\"state_2d_set1\",\"ETAN\",Float32)\nwrite(flds,savename,README=readme);\nnothing #hide","category":"page"},{"location":"generated/Example3/#D-examples","page":"Example 3 : Tiled Domain","title":"3D examples","text":"","category":"section"},{"location":"generated/Example3/","page":"Example 3 : Tiled Domain","title":"Example 3 : Tiled Domain","text":"(flds,savename,readme)=prep_nctiles_native(inputs,\"state_3d_set1\",\"THETA\",Float32);\nwrite(flds,savename,README=readme);\n\n(flds,savename,readme)=prep_nctiles_native(inputs,\"state_3d_set1\",\"SALT\",Float32);\nwrite(flds,savename,README=readme);\nnothing #hide","category":"page"},{"location":"generated/Example3/#D-vector-field-examples","page":"Example 3 : Tiled Domain","title":"3D vector field examples","text":"","category":"section"},{"location":"generated/Example3/","page":"Example 3 : Tiled Domain","title":"Example 3 : Tiled Domain","text":"(flds,savename,readme)=prep_nctiles_native(inputs,\"trsp_3d_set1\",\"UVELMASS\",Float32);\nwrite(flds,savename,README=readme);\n\n(flds,savename,readme)=prep_nctiles_native(inputs,\"trsp_3d_set1\",\"VVELMASS\",Float32);\nwrite(flds,savename,README=readme);\n\n(flds,savename,readme)=prep_nctiles_native(inputs,\"trsp_3d_set1\",\"WVELMASS\",Float32);\nwrite(flds,savename,README=readme);\nnothing #hide","category":"page"},{"location":"generated/Example3/","page":"Example 3 : Tiled Domain","title":"Example 3 : Tiled Domain","text":"","category":"page"},{"location":"generated/Example3/","page":"Example 3 : Tiled Domain","title":"Example 3 : Tiled Domain","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/Example5/","page":"Example 5 : Array Types","title":"Example 5 : Array Types","text":"EditURL = \"https://github.com/gaelforget/NCTiles.jl/blob/master/examples/Example5.jl\"","category":"page"},{"location":"generated/Example5/#Example-5-:-Array-Types","page":"Example 5 : Array Types","title":"Example 5 : Array Types","text":"","category":"section"},{"location":"generated/Example5/","page":"Example 5 : Array Types","title":"Example 5 : Array Types","text":"A ClimArray (struct from ClimateBase.jl), which includes metadata read from nectdf file, is written back to a netcdf file via NCTiles.jl. Then the reverse is done to illustrate consistent workflows.","category":"page"},{"location":"generated/Example5/","page":"Example 5 : Array Types","title":"Example 5 : Array Types","text":"using ClimateBase, NCDatasets, NCTiles, Dates, Unitful","category":"page"},{"location":"generated/Example5/","page":"Example 5 : Array Types","title":"Example 5 : Array Types","text":"File Paths","category":"page"},{"location":"generated/Example5/","page":"Example 5 : Array Types","title":"Example 5 : Array Types","text":"inputs=NCTiles.NCTILES_TESTCASES\nNCTiles.ensure_testcases_installed()\n\noutputs = joinpath(tempdir(),\"NCTILES_TESTCASES_OUTPUT/\")\nif ~ispath(outputs); mkpath(outputs); end\n\nsavedir = joinpath(outputs,\"ex5\")\nif ~ispath(savedir); mkpath(savedir); end","category":"page"},{"location":"generated/Example5/#.-Read-via-NCTiles.jl-and-write-via-ClimateBase.jl","page":"Example 5 : Array Types","title":"1. Read via NCTiles.jl and write via ClimateBase.jl","text":"","category":"section"},{"location":"generated/Example5/#Helper-function","page":"Example 5 : Array Types","title":"Helper function","text":"","category":"section"},{"location":"generated/Example5/","page":"Example 5 : Array Types","title":"Example 5 : Array Types","text":"\"\"\"\n        NCvar_to_ClimArray(ncvar::NCvar,ncdims::Dict)\n\nCreates a ClimArray struct, from a NCvar struct, which can then be written\nto a NetCDF file using `ClimateBase.ncwrite()`.\n\"\"\"\nfunction NCvar_to_ClimArray(ncvar::NCvar,ncdims::Dict)\n    lons=ncdims[\"lon_c\"].values[:]\n    lats=ncdims[\"lat_c\"].values[:]\n    t=ncdims[\"tim\"].values[:]\n    dimensions = (Lon(lons), Lat(lats), ClimateBase.Ti(t))\n\n    name=ncvar.name\n    data=ncvar.values[:]\n    units=ncvar.units\n    return ClimArray(data, dimensions; name = name, attrib = Dict(\"units\" => units))\nend","category":"page"},{"location":"generated/Example5/#Main-call-sequence-:","page":"Example 5 : Array Types","title":"Main call sequence :","text":"","category":"section"},{"location":"generated/Example5/","page":"Example 5 : Array Types","title":"Example 5 : Array Types","text":"fil=joinpath(outputs,\"ex1/ex1_NetCDF.nc\")\nncvars,ncdims,fileatts = NCTiles.readncfile(fil)\n\n#filout=joinpath(savedir,\"ex5_NCTiles.nc\")\n#write(ncvars[\"ETAN\"],filout,globalattribs=fileatts)\n\nfilout=joinpath(savedir,\"ex5_ClimateBase.nc\")\nA=NCvar_to_ClimArray(ncvars[\"ETAN\"],ncdims)\nClimateBase.ncwrite(filout, A)","category":"page"},{"location":"generated/Example5/#.-Read-via-ClimateBase.jl-and-write-via-NCTiles.jl","page":"Example 5 : Array Types","title":"2. Read via ClimateBase.jl and write via NCTiles.jl","text":"","category":"section"},{"location":"generated/Example5/#Helper-function-2","page":"Example 5 : Array Types","title":"Helper function","text":"","category":"section"},{"location":"generated/Example5/","page":"Example 5 : Array Types","title":"Example 5 : Array Types","text":"\"\"\"\n        ClimArray_to_NCvar(C::ClimGrid,N::String)\n\nCreates an NCvar struct, from a ClimArray struct, which can then be written\nto a NetCDF file using `NCTiles.write()`.\n\n```\nC = ClimateBase.ncread(fil, \"ETAN\")\nwritefld = ClimArray_to_NCvar(C,\"ETAN\")\nNCTiles.write(writefld,\"myfile.nc\")\n```\n\"\"\"\nfunction ClimArray_to_NCvar(C::ClimArray,N::String)\n        x = C.dims[1][:]\n        y = C.dims[2][:]\n        timevec = DateTime.(C.dims[3][:])\n        timeunit = \"days since 1992-01-01\"\n        timevec = NCDatasets.timeencode(timevec, timeunit)\n\n        dims = [NCvar(\"lon\",\"degrees_east\",size(C.data)[1],x,Dict(\"long_name\" => \"longitude\"),NCDatasets),\n                NCvar(\"lat\",\"degrees_north\",size(C.data)[2],y,Dict(\"long_name\" => \"latitude\"),NCDatasets),\n                NCvar(\"time\",timeunit,Inf,timevec,Dict((\"long_name\" => \"Ti\",\"standard_name\" => \"time\")),NCDatasets)\n                ]\n\n        return NCvar(N,C.attrib[\"units\"],dims,C.data,C.attrib,NCDatasets)\nend","category":"page"},{"location":"generated/Example5/#Main-call-sequence-:-2","page":"Example 5 : Array Types","title":"Main call sequence :","text":"","category":"section"},{"location":"generated/Example5/","page":"Example 5 : Array Types","title":"Example 5 : Array Types","text":"Note: ClimateBase.jl relies on specific dimension names to identify space and time dimensions (as follows). This sometimes lead to warnings when files use different names.","category":"page"},{"location":"generated/Example5/","page":"Example 5 : Array Types","title":"Example 5 : Array Types","text":"latitude: lat, latitude, rlat, y, yc\nlongitude: lon, longitude, rlon, x, xc\ntime: time","category":"page"},{"location":"generated/Example5/","page":"Example 5 : Array Types","title":"Example 5 : Array Types","text":"ETAN = ClimateBase.ncread(fil, \"ETAN\")\nETAN = ClimArray_to_NCvar(ETAN,\"ETAN\")\nfilout=joinpath(savedir,\"ex5_ClimArray_to_NCvar.nc\")\nNCTiles.write(ETAN,filout)\n\n#\n\nusing MeshArrays\n\nfunction ClimArray_to_MeshArray(C::ClimArray)\n        u=uparse(C.attrib[\"units\"])\n        n=string(C.name)\n        ln=C.attrib[\"long_name\"]\n        tim=DateTime.(collect(tmp.dims[3][:]))\n        m=varmeta(u,fill(0.5,3),tim,n,ln)\n        #MeshArray(C.data;meta=m)\n\n        nlon=length(tmp.dims[1][:])\n        nlat=length(tmp.dims[2][:])\n        XC = MeshArray(tmp.dims[1][:]*ones(1,nlon))\n        YC = MeshArray(ones(nlat,1)*tmp.dims[2][:]')\n        Γ = (XC=XC,YC=YC)\n\n        MeshArray(C.data;meta=m),Γ\nend\n\nfunction NCvar_to_MeshArray(ncvar::NCvar)\n        u=uparse(ncvar.units)\n        n=string(ncvar.name)\n        ln=ncvar.atts[\"long_name\"]\n        tim=ncvar.dims[3].values[:]\n        m=varmeta(u,fill(0.5,3),tim,n,ln)\n        #MeshArray(ncvar.values[:];meta=m)\n\n        nlon=length(ncvar.dims[1].values[:])\n        nlat=length(ncvar.dims[2].values[:])\n        XC = MeshArray(ncvar.dims[1].values[:]*ones(1,nlon))\n        YC = MeshArray(ones(nlat,1)*ncvar.dims[2].values[:]')\n        Γ = (XC=XC,YC=YC)\n\n        MeshArray(ncvar.values[:];meta=m),Γ\nend\n\nfil=joinpath(outputs,\"ex1/ex1_NetCDF.nc\")\ntmp = ClimateBase.ncread(fil, \"ETAN\")\nETAN,Γ = ClimArray_to_MeshArray(tmp)\n\nncvars,ncdims,fileatts = NCTiles.readncfile(fil)\nETAN,Γ = NCvar_to_MeshArray(ncvars[\"ETAN\"])","category":"page"},{"location":"generated/Example5/","page":"Example 5 : Array Types","title":"Example 5 : Array Types","text":"","category":"page"},{"location":"generated/Example5/","page":"Example 5 : Array Types","title":"Example 5 : Array Types","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/Example2/","page":"Example 2 : Lazily Read","title":"Example 2 : Lazily Read","text":"EditURL = \"https://github.com/gaelforget/NCTiles.jl/blob/master/examples/Example2.jl\"","category":"page"},{"location":"generated/Example2/#Example-2-:-Lazily-Read","page":"Example 2 : Lazily Read","title":"Example 2 : Lazily Read","text":"","category":"section"},{"location":"generated/Example2/","page":"Example 2 : Lazily Read","title":"Example 2 : Lazily Read","text":"Two-dimensional fields are read from the netcdf file generated in Example1, and then re-written to a new netcdf file.","category":"page"},{"location":"generated/Example2/","page":"Example 2 : Lazily Read","title":"Example 2 : Lazily Read","text":"using NCTiles,NetCDF\n\ninputs=NCTiles.NCTILES_TESTCASES\nNCTiles.ensure_testcases_installed()\n\noutputs = joinpath(tempdir(),\"NCTILES_TESTCASES_OUTPUT/\")\nif ~ispath(outputs); mkpath(outputs); end","category":"page"},{"location":"generated/Example2/","page":"Example 2 : Lazily Read","title":"Example 2 : Lazily Read","text":"Using NCDatasets backend","category":"page"},{"location":"generated/Example2/","page":"Example 2 : Lazily Read","title":"Example 2 : Lazily Read","text":"file_in=outputs*\"ex1/ex1_NCDatasets.nc\"\n~isfile(file_in) ? error(\"Running Example1 first is needed to run Example2\") : nothing\n\nfile_out=outputs*\"ex2/ex2_NCDatasets.nc\"\nif ~ispath(outputs*\"ex2/\"); mkpath(outputs*\"ex2/\"); end\n\nREADME = readlines(joinpath(inputs,\"README\"))","category":"page"},{"location":"generated/Example2/","page":"Example 2 : Lazily Read","title":"Example 2 : Lazily Read","text":"Get all the metadata from the file and set up NCvars","category":"page"},{"location":"generated/Example2/","page":"Example 2 : Lazily Read","title":"Example 2 : Lazily Read","text":"ncvars,ncdims,fileatts = readncfile(file_in)","category":"page"},{"location":"generated/Example2/","page":"Example 2 : Lazily Read","title":"Example 2 : Lazily Read","text":"Rewrite to a file","category":"page"},{"location":"generated/Example2/","page":"Example 2 : Lazily Read","title":"Example 2 : Lazily Read","text":"write(ncvars,file_out,README=README,globalattribs=fileatts)","category":"page"},{"location":"generated/Example2/","page":"Example 2 : Lazily Read","title":"Example 2 : Lazily Read","text":"Using NetCDF backend","category":"page"},{"location":"generated/Example2/","page":"Example 2 : Lazily Read","title":"Example 2 : Lazily Read","text":"file_out=outputs*\"ex2/ex2_NetCDF.nc\"\nncvars,ncdims,fileatts = readncfile(file_in,NetCDF)\nwrite(ncvars,file_out,README=README,globalattribs=fileatts)","category":"page"},{"location":"generated/Example2/","page":"Example 2 : Lazily Read","title":"Example 2 : Lazily Read","text":"","category":"page"},{"location":"generated/Example2/","page":"Example 2 : Lazily Read","title":"Example 2 : Lazily Read","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#NCTiles.jl","page":"Home","title":"NCTiles.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NCTiles.jl mainly aims to make it easier to write (and read) NetCDF files that represent e.g. the whole Earth surface or a subdomain (tiles) based on the CF conventions. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Goals of NCTiles.jl include (1) inter-operability with climate model grids via MeshArrays.jl, MITgcmTools.jl, and ClimateModels.jl; (2) generation of CF-compliant files from suitable array formats. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"maindocs.md\",\n    \"examples.md\",\n]\nDepth = 2","category":"page"},{"location":"","page":"Home","title":"Home","text":"NCTiles.jl derives from the earlier nctiles implementation in gcmfaces (Forget et al. 2015).","category":"page"},{"location":"maindocs/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"NCTiles.jl generally operates in two steps:","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"lazy operations, on data structures, to obtain information about variables without data transfer.\ncalling the write function to instantiate and write files; or the read function for the reverse.","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Higher-level APIs, which are practical for automated or distributed workflows, can be called upon as a model runs forward in time, for example. These are readily documented in the Use Examples section. ","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"The top level data structures, NCvar, contains information needed to write a NetCDF file from e.g. a list of filenames. See Data Structures for more detail about NCvar and embeded data structures. ","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Below we walk through a Basic Example to further document the internals, core data structures, and functionalities.","category":"page"},{"location":"maindocs/#Data-Structures","page":"User Guide","title":"Data Structures","text":"","category":"section"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"The core functionality of NCTiles comes from a series of data structures that contain the information needed write to NetCDF files. This includes the information and methods needed to read from source files. ","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"The data structure used for writing or reading a variable is NCvar, which includes that variable's data and metadata. ","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"struct NCvar\n    name::String\n    units::String\n    dims\n    values\n    atts::Union{Dict,Nothing}\n    backend::Module\nend","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Within the NCvar struct, the data itself can either (1) be in memory, and included directly via values, or can (2) be described in another data structure (NCData / BinData / TileData for values) :","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"BinData for data in binary files or an array\nNCData for data in NetCDF files\nTileData for e.g. tiled model output when subdomains are often written out in distributed fashion across file collections.","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"struct BinData\n    fnames::Union{Array{String},String}\n    precision::Type\n    iosize::Tuple\n    fldidx::Int\nend\n\nstruct NCData\n    fname::AbstractString\n    varname::AbstractString\n    backend::Module\n    precision::Type\nend\n\nstruct TileData{T}\n    vals::T\n    tileinfo::Dict\n    tilesize::Tuple\n    precision::Type\n    numtiles::Int\nend","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"The vals field in TileData can be a MeshArray or a BinData. Information about the tile layout is in tileinfo, tilesize, and numtiles. See Use Examples for suitable Earth domain decomposition examples using MeshArrays.","category":"page"},{"location":"maindocs/#Basic-Example","page":"User Guide","title":"Basic Example","text":"","category":"section"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Here we show how to write a metadata-rich NetCDF file from a series of binary data files, which represents output from a climate model (MITgcm output in this example). We try here to document the metadata specification in detail as one of the main goals of NCTiles.jl is to facilitate the production of metadata-rich data sets that are easily reuseable. ","category":"page"},{"location":"maindocs/#Define-Dimensions","page":"User Guide","title":"Define Dimensions","text":"","category":"section"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"The first step for creating a NetCDF file is to define your dimensions. Each dimension is specified by an NCvar. Dimensions should be in an Array in the order corresponding to your variable data (if your data dimensions are lon x lat x time, dimensions should be in that order as well). In this example we have a regular half-degree lat-lon grid with 10 time steps. This is how we define the dimensions:","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"lon = -179.75:0.5:179.75\nlat = -89.75:0.5:89.75\ntime = 1:10\n\ndims = [NCvar(\"lon\",\"degrees_east\",size(lon),lon,Dict(\"long_name\" => \"longitude\"),NCDatasets),\n        NCvar(\"lat\",\"degrees_north\",size(lat),lat,Dict(\"long_name\" => \"latitude\"),NCDatasets),\n        NCvar(\"time\",\"days since 1992-01-01\",Inf,time,Dict((\"long_name\" => \"tim\",\"standard_name\" => \"time\")),NCDatasets)\n        ]","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Let's go through the NCvar constructor (see Data Structures). ","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"The first attribute, name, should be a String and is what you want to call the variable in the file. The second are the units, which should also be a String. We then specify the dimensions, dims. For Dimension variables dims should be of length 1 (calling size on your dimension values like above if sufficient). Next you specify the actual dimension values. For a Dimension variable, this must be a 1 dimensional array, like above. After the values you can specify any additional attributes that you want to add to the variable as a dictionary. The last attribute is the backend, which allows you to choose between NCDatasets.jl and NetCDF.jl. ","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"NCTiles.jl has some support for NetCDF.jl and most fully supports NCDatasets.jl. ","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"note: Note\nCreating NCvar structs does not enforce any CF Compliance check; it is the user's responsibility to provide CF-compliant units.","category":"page"},{"location":"maindocs/#Define-the-Data-Source","page":"User Guide","title":"Define the Data Source","text":"","category":"section"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Once you've created the dimensions for your NetCDF file you can create NCvar for your variable. Here we are going to create one pointing to data that is stored in binary files (one file for each time step / period). ","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"First create this pointer to the data – the BinData struct documented in Data Structures. For example:","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"precision = Float32\ndatapath = \"data/binfiles/\"\nfnames = joinpath.(Ref(datapath),\n                    [\"Chl050.001.data\",\"Chl050.002.data\",\"Chl050.003.data\",\"Chl050.004.data\",\"Chl050.005.data\",\"Chl050.006.data\",\"Chl050.007.data\",\"Chl050.008.data\",\"Chl050.009.data\",\"Chl050.010.data\"])\nvardata = BinData(fnames,precision,(length(lon),length(lat)))\n# or: vardata = BinData(fnames,precision,(length(lon),length(lat)),1)","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"In order to read data from a binary file, we need to know where the files are and their names, the precision that the data is written in, and the dimensions of the data. ","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"The first argument, fnames, should be a single file path String or an Array of file paths Strings. The second should be the precision that the data is written in the file, here our data is Float32. Precision should be a Type. Finally we need to know the size of the data that we are reading from the file, this should be specified as a Tuple. If we have multiple variables written in the same file, we can additionally specify the index of that variable, say if it's the 10th variable in the file. In this example there is only one variable in the file, so we can specify 1 or leave it out and it will be assumed to be 1.","category":"page"},{"location":"maindocs/#Create-the-NCvar","page":"User Guide","title":"Create the NCvar","text":"","category":"section"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Now we can create the NCvar for the variable we want to write to the file.","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"varname = \"Chl050\"\nunits = \"mg Chl\"\nlongname = \"Average chlorophyll concentration (top 50m)\"\nmyvar = NCvar(varname,units,dims,vardata,Dict(\"long_name\" => longname),NCDatasets)","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Creating the final NCvar for our variable is similar to creating a dimension NCvar. We specify the name we want to use in the file and the units. Here we use the dims array and the vardata struct we created above. We specify a long_name attribute, and finally indicate that we want to use NCDatasets in the backend.","category":"page"},{"location":"maindocs/#Writing-to-the-NetCDF-File","page":"User Guide","title":"Writing to the NetCDF File","text":"","category":"section"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Assuming you've created the above structs as expected, executing the write function is as simple as:","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"README = \"A useful README that describes the data in the file.\"\nattributes = Dict([\"_FillValue\"=>NaN, \"missing_value\" => NaN])\nwrite(myvar,\"data/mydata.nc\",README=README,globalattribs=attributes)","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"The write function requires at a minimum an NCvar and the output file path. It writes the NCvar to the file with default global attributes. Additionally you can specify a README and global attributes, by passing a String or Array of Strings to the README keyword argument or by providing a Dict to the globalattribs keyword argument, as shown above.","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"If you would like to write multiple variables to the same file, you can pass a Dict{String,NCvar} into the write function:","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"myvars = Dict([\"myvar1\" => myvar1,\n                \"myvar2\" => myvar2])\nwrite(myvar,\"data/mydata.nc\")","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Where the keys of the Dict should match the name attributes of the NCvar struct values.","category":"page"},{"location":"maindocs/#NCData-and-TileData","page":"User Guide","title":"NCData and TileData","text":"","category":"section"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"In the example above we wrote a NetCDF file with data sourced from Binary Files, specified by the BinData struct. ","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Other structs for different kinds of input data are provided; see Data Structures for further documentation.","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"NCData: for data sourced from a NetCDF file\nTileData: for data to be written into separate tile files","category":"page"},{"location":"maindocs/#NCData","page":"User Guide","title":"NCData","text":"","category":"section"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"NCData structs contain the necessary information to read data from a NetCDF file.","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"For example, if you wanted to use the NetCDF file created before as a data source, you would use the NCData constructor:","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"myvardata = NCData(\"data/mydata.nc\",\"Chl050\",NCDatasets)","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Where the arguments are: file path; variable name; backend.","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Alternatively, we provide the function readncfile which creates NCvars containing the NCData structs for all the variables in the file:","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"ncvars,ncdims,fileatts = readncfile(\"data/mydata.nc\")","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Here, the ncvars dictionary contains NCvars of all the variables in the file. Each NCvar has NCData structs in the values attribute, which avoids reading in all the data from the file. In this case the NCData can be accessed as myvardata = ncvars[\"Chl050\"].values.","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"To re-write this exact file run:","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"write(ncvars,joinpath(\"data/mydata2.nc\"),globalattribs=fileatts)","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"You can see this process demonstrated in Example2.jl.","category":"page"},{"location":"maindocs/#TileData","page":"User Guide","title":"TileData","text":"","category":"section"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"The TileData struct is used to chunk up data and write to separate files. We do this using the MeshArrays package. This is demonstrated in more detail in Example3.jl. First, specify your grid and read in the grid variables:","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"using MeshArrays\ngrid = GridSpec(\"LatLonCap\",MeshArrays.GRID_LLC90)\ngridvars = GridLoad(grid)","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Where GridSpec() and GridLoad() are from the MeshArrays package (please refer to the MeshArrays.jl docs for more on these functions and grids).","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"The next step is to specify the tile, or chunk, size as a tuple. The data is chunked in the horizontal dimension, so tile sizes should be two dimensional tuple. If the data is three dimensional, say its full dimension is NxMx10 and the tile size is nxm, the chunks will be nxmx10. Here we set the tile size to 90x90:","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"tilesize = (90,90)","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"When defining dimensions for TileData variables, the horizontal dimensions should be the size of the tiles, and their values integers 1:n or 1:m for an nxm tile:","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"time = 1:10\ndep = gridvars.RC\ndims = [\n    NCvar(\"i_c\",\"1\",tilesize[1],1:tilesize[1],Dict(\"long_name\" => \"Cartesian coordinate 1\"),NCDatasets),\n    NCvar(\"j_c\",\"1\",tilesize[2],1:tilesize[2],Dict(\"long_name\" => \"Cartesian coordinate 2\"),NCDatasets),\n    NCvar(\"dep_c\",\"m\",size(dep),dep,Dict(\"long_name\" => \"depth\",\"standard_name\" => \"depth\",\"positive\" => \"down\"),NCDatasets),\n    NCvar(\"time\",\"days since 1992-01-01\",Inf,time,Dict((\"long_name\" => \"tim\",\"standard_name\" => \"time\")),NCDatasets)\n]","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"The latitude and longitude variables will be written to the file separately, their data specified by TileData structs:","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"tillat = TileData(gridvars.YC,tilesize,grid)\nvarlat = NCvar(\"lat\",\"degrees_north\",dims[1:2],tillat,Dict(\"long_name\" => \"latitude\"),NCDatasets)\ntillon = TileData(gridvars.XC,tilesize,grid)\nvarlon = NCvar(\"lon\",\"degrees_east\",dims[1:2],tillon,Dict(\"long_name\" => \"longitude\"),NCDatasets)","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"Since the data for latitude and longitude are held in memory (in the gridvars dictionary), we can specify it directly. At construction, the TileData struct will create the mapping for which indices of the latitude and longitude data should be put in each tile. When a file is written, NCTiles will use this mapping to extract the chunk for that file. The dimensions for the corresponding NCvars should have the dimensions dims[1:2], corresponding to i_c and j_c.","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"The variable we want to write is in a binary data file, so we can use a BinData struct in the TileData for our variable:","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"vardata = TileData(BinData(fnames,prec,iosize),\n                    tilesize,\n                    grid)\nmyvar = NCvar(varname,\"myunits\",dims,vardata,Dict(),NCDatasets)","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"The final step is to create the NCvars and write them to the NetCDF files:","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"vars = Dict([varname => myvar,\n                    \"lon\" => varlon,\n                    \"lat\" => varlat\n            ])\n\nsavenamebase = \"data/mytiledata\"\nwrite(vars,savenamebase)","category":"page"},{"location":"maindocs/","page":"User Guide","title":"User Guide","text":"The write function will create one file for each tile, using savenamebase as a prefix for the file path. It will append a zero-padded number to the end of the filename, along with the extension .nc. For this example we would have the files data/mytiledata.0001.nc, data/mytiledata.0002.nc, ..., data/mytiledata.0013.nc.","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"","category":"page"},{"location":"API/#Docstrings","page":"API","title":"Docstrings","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [NCTiles]\nOrder   = [:type,:function]\nPrivate = false","category":"page"},{"location":"API/#NCTiles.BinData","page":"API","title":"NCTiles.BinData","text":"BinData\n\nData structure containing a string or an array of strings (NetCDF     file names) as well as metadata needed to read a file.\n\n\n\n\n\n","category":"type"},{"location":"API/#NCTiles.BinData-Tuple{Union{String, Array{String, N} where N}, Type, Tuple}","page":"API","title":"NCTiles.BinData","text":"BinData(fnames::Union{Array{String},String},precision::Type,iosize::Tuple)\n\nConstruct a BinData struct for files that contain one field.\n\n\n\n\n\n","category":"method"},{"location":"API/#NCTiles.NCData","page":"API","title":"NCTiles.NCData","text":"NCData\n\nData structure containing a string or an array of strings (file names) of     NetCDF files as well as information needed to read a file.\n\n\n\n\n\n","category":"type"},{"location":"API/#NCTiles.NCvar","page":"API","title":"NCTiles.NCvar","text":"NCvar\n\nData structure containing information needed to write a NetCDF file. This includes a list of filenames (see Bindata) if the data is not loaded into memory.\n\n\n\n\n\n","category":"type"},{"location":"API/#NCTiles.TileData","page":"API","title":"NCTiles.TileData","text":"TileData{T}\n\nData structure containing either a MeshArray struct or BinData struct (see vals),     MeshArray structs describing the tile layout (tileinfo), and other information for     reading/writing tile data.\n\n\n\n\n\n","category":"type"},{"location":"API/#NCTiles.TileData-Tuple{Any, Tuple, MeshArrays.gcmgrid}","page":"API","title":"NCTiles.TileData","text":"TileData(vals,tilesize::Tuple)\n\nConstruct a TileData struct. First generate the tileinfo, precision, and numtiles attributes.\n\n\n\n\n\n","category":"method"},{"location":"API/#Base.write-Tuple{Dict{AbstractString, NCvar}, String}","page":"API","title":"Base.write","text":"write(myflds::Dict,savename::String;README=\"\",globalattribs=Dict())\n\nCreates NetCDF file and writes myflds and all their dimensions to the file.\n\n\n\n\n\n","category":"method"},{"location":"API/#Base.write-Tuple{NCvar, String}","page":"API","title":"Base.write","text":"write(myfld::NCvar,savename::String;README=\"\",globalattribs=Dict())\n\nCreates NetCDF file and writes myfld and all its dimensions to the file.\n\n\n\n\n\n","category":"method"},{"location":"API/#NCTiles.addData-Tuple{Union{Array, NCDatasets.CFVariable, NetCDF.NcVar}, NCvar}","page":"API","title":"NCTiles.addData","text":"addData(v::Union{NCDatasets.CFVariable,NetCDF.NcVar},var::NCvar)\n\nFill variable with data in netcdf file using either NCDatasets.jl or NetCDF.jl\n\n\n\n\n\n","category":"method"},{"location":"API/#NCTiles.addDim-Tuple{NCDatasets.NCDataset, NCvar}","page":"API","title":"NCTiles.addDim","text":"addDim(ds::NCDatasets.Dataset,dimvar::NCvar) # NCDatasets\n\nAdd a dimension to a NCDatasets.Dataset\n\n\n\n\n\n","category":"method"},{"location":"API/#NCTiles.addDim-Tuple{NCvar}","page":"API","title":"NCTiles.addDim","text":"addDim(dimvar::NCvar)\n\nAdd a dimension to a NetCDF file using NetCDF.jl\n\n\n\n\n\n","category":"method"},{"location":"API/#NCTiles.addDimData-Tuple{Any, NCvar}","page":"API","title":"NCTiles.addDimData","text":"addDimData(v::Union{NCDatasets.CFVariable,NetCDF.NcVar,Array},var::NCvar)\n\nAdd dimension data to predefined dimensions in a NetCDF file.\n\n\n\n\n\n","category":"method"},{"location":"API/#NCTiles.addVar-Tuple{NCDatasets.NCDataset, NCvar}","page":"API","title":"NCTiles.addVar","text":"addVar(ds::NCDatasets.Dataset,field::NCvar)\n\nAdd a variable to a NetCDF file using NCDatasets.jl\n\n\n\n\n\n","category":"method"},{"location":"API/#NCTiles.addVar-Tuple{NCvar, Array{NetCDF.NcDim, N} where N}","page":"API","title":"NCTiles.addVar","text":"addVar(field::NCvar,dimlist::Array{NetCDF.NcDim})\n\nAdd a variable with dimensions dimlist to a NetCDF file using NetCDF.jl\n\n\n\n\n\n","category":"method"},{"location":"API/#NCTiles.addVar-Tuple{NCvar}","page":"API","title":"NCTiles.addVar","text":"addVar(field::NCvar})\n\nAdd a variable and its dimensions to a NetCDF file using NetCDF.jl\n\n\n\n\n\n","category":"method"},{"location":"API/#NCTiles.createfile","page":"API","title":"NCTiles.createfile","text":"createfile(filename, field::Union{NCvar,Dict{String,NCvar}}, README;\n            fillval=NaN, missval=NaN, itile=1, ntile=1)\n\nCreate NetCDF file and add variable + dimension definitions using either NCDatasets.jl or NetCDF.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#NCTiles.readbin","page":"API","title":"NCTiles.readbin","text":"readbin(flddata::BinData,tidx=1)\n\nRead in a binary file as an array as specified by BinData\n\n\n\n\n\n","category":"function"},{"location":"API/#NCTiles.readbin-2","page":"API","title":"NCTiles.readbin","text":"readbin(fname::String,prec::Type,iosize::Tuple,fldidx=1)\n\nRead in a binary file to an Array.\n\n\n\n\n\n","category":"function"},{"location":"API/#NCTiles.readncfile","page":"API","title":"NCTiles.readncfile","text":"readncfile(fname,backend::Module=NCDatasets)\n\nRead in a NetCDF file and return variables/dimensions as NCvar structs, and     file attributes as Dict. Large variables/dimensions are not loaded into     memory. This can use either NCDatasets.jl or NetCDF.jl\n\n\n\n\n\n","category":"function"}]
}
