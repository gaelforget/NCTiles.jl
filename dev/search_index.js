var documenterSearchIndex = {"docs":
[{"location":"#NCTiles.jl-Package-Documentation-1","page":"NCTiles.jl Package Documentation","title":"NCTiles.jl Package Documentation","text":"","category":"section"},{"location":"#","page":"NCTiles.jl Package Documentation","title":"NCTiles.jl Package Documentation","text":"NCTiles.jl reads and writes NetCDF files that represent e.g. subdivisions of Earth's surface (tiles). Inter-operability with popular climate model grids and MeshArrays.jl and generation of CF-compliant files are key goals of this package. ","category":"page"},{"location":"#Contents-1","page":"NCTiles.jl Package Documentation","title":"Contents","text":"","category":"section"},{"location":"#","page":"NCTiles.jl Package Documentation","title":"NCTiles.jl Package Documentation","text":"","category":"page"},{"location":"#","page":"NCTiles.jl Package Documentation","title":"NCTiles.jl Package Documentation","text":"NCTiles.jl derives from the earlier nctiles implementation in gcmfaces (Forget et al. 2015).","category":"page"},{"location":"#Main-Features-1","page":"NCTiles.jl Package Documentation","title":"Main Features","text":"","category":"section"},{"location":"#","page":"NCTiles.jl Package Documentation","title":"NCTiles.jl Package Documentation","text":"NCTiles.jl first goes through lazy operations, on data stucture, as it obtains information about variables etc. The second phase calls createfile and then the add* functions to instantiate files. Note: some of the included functions are interfaces to MITgcm output.","category":"page"},{"location":"#","page":"NCTiles.jl Package Documentation","title":"NCTiles.jl Package Documentation","text":"Data structures:","category":"page"},{"location":"#","page":"NCTiles.jl Package Documentation","title":"NCTiles.jl Package Documentation","text":"NCData contains a string or an array of strings (NetCDF file names) + metadata to read files. \nNCvar contains information needed to write a NetCDF file which can include a list of filenames (see Bindata) if the data is not loaded into memory.\nBinData is a container for one field.\nTileData contains a MeshArray or BinData struct in vals,   information about the tile layout in tileinfo, and metadata needed for   reading/writing tile data.","category":"page"},{"location":"#","page":"NCTiles.jl Package Documentation","title":"NCTiles.jl Package Documentation","text":"As an example:","category":"page"},{"location":"#","page":"NCTiles.jl Package Documentation","title":"NCTiles.jl Package Documentation","text":"struct TileData{T}\n    vals::T\n    tileinfo::Dict\n    tilesize::Tuple\n    precision::Type\n    numtiles::Int\nend","category":"page"},{"location":"#Use-examples-1","page":"NCTiles.jl Package Documentation","title":"Use examples","text":"","category":"section"},{"location":"#","page":"NCTiles.jl Package Documentation","title":"NCTiles.jl Package Documentation","text":"DataStructures/06_nctiles.ipynb in this GlobalOceanNotebooks repo provides a series of examples that overlap somewhat with the ones found in Examples/ex*.jl:","category":"page"},{"location":"#","page":"NCTiles.jl Package Documentation","title":"NCTiles.jl Package Documentation","text":"ex_1.jl reads a binary file containing one interpolated 2D field on a regular grid. It then writes that array to a NetCDF/NCTiles file.\nex_2.jl reads data from a NetCDF file containing one tile of model output. It then writes it to a new NetCDF/NCTiles file. This uses 3D data on a non-regular grid for one ocean subdivision (tile).\nex_3.jl is an example of interpolated model output processing in CBIOMES where several variables are included in the same NetCDF/NCTiles file.\nex_4.jl generates a tiled netcdf output (i.e., a nctiles output) for a global 2D field on the non-regular LLC90 grid (see MeshArrays.jl). Since the tile width is set to 90, this creates 13 files.","category":"page"},{"location":"#Index-1","page":"NCTiles.jl Package Documentation","title":"Index","text":"","category":"section"},{"location":"#","page":"NCTiles.jl Package Documentation","title":"NCTiles.jl Package Documentation","text":"","category":"page"},{"location":"#API-/-Functions-1","page":"NCTiles.jl Package Documentation","title":"API / Functions","text":"","category":"section"},{"location":"#","page":"NCTiles.jl Package Documentation","title":"NCTiles.jl Package Documentation","text":"Modules = [NCTiles]\nOrder   = [:type,:function]\nPrivate = false","category":"page"},{"location":"#NCTiles.BinData","page":"NCTiles.jl Package Documentation","title":"NCTiles.BinData","text":"BinData\n\nData structure containing a string or an array of strings (NetCDF     file names) as well as metadata needed to read a file.\n\n\n\n\n\n","category":"type"},{"location":"#NCTiles.BinData-Tuple{Union{String, Array{String,N} where N},Type,Tuple}","page":"NCTiles.jl Package Documentation","title":"NCTiles.BinData","text":"BinData(fnames::Union{Array{String},String},precision::Type,iosize::Tuple)\n\nConstruct a BinData struct for files that contain one field.\n\n\n\n\n\n","category":"method"},{"location":"#NCTiles.NCData","page":"NCTiles.jl Package Documentation","title":"NCTiles.NCData","text":"NCData\n\nData structure containing a string or an array of strings (file names) of     NetCDF files as well as information needed to read a file.\n\n\n\n\n\n","category":"type"},{"location":"#NCTiles.NCvar","page":"NCTiles.jl Package Documentation","title":"NCTiles.NCvar","text":"NCvar\n\nData structure containing information needed to write a NetCDF file. This includes a list of filenames (see Bindata) if the data is not loaded into memory.\n\n\n\n\n\n","category":"type"},{"location":"#NCTiles.TileData","page":"NCTiles.jl Package Documentation","title":"NCTiles.TileData","text":"TileData{T}\n\nData structure containing either a MeshArray struct or BinData struct (see vals),     MeshArray structs describing the tile layout (tileinfo), and other information for     reading/writing tile data.\n\n\n\n\n\n","category":"type"},{"location":"#NCTiles.TileData-Tuple{Any,Tuple,MeshArrays.gcmgrid}","page":"NCTiles.jl Package Documentation","title":"NCTiles.TileData","text":"TileData(vals,tilesize::Tuple)\n\nConstruct a TileData struct. First generate the tileinfo, precision, and numtiles attributes.\n\n\n\n\n\n","category":"method"},{"location":"#Base.write-Tuple{Dict,String}","page":"NCTiles.jl Package Documentation","title":"Base.write","text":"write(myflds::Dict,savename::String;README=\"\",globalattribs=Dict())\n\nCreates NetCDF file and writes myflds and all their dimensions to the file.\n\n\n\n\n\n","category":"method"},{"location":"#Base.write-Tuple{NCvar,String}","page":"NCTiles.jl Package Documentation","title":"Base.write","text":"write(myfld::NCvar,savename::String;README=\"\",globalattribs=Dict())\n\nCreates NetCDF file and writes myfld and all its dimensions to the file.\n\n\n\n\n\n","category":"method"},{"location":"#NCTiles.addData-Tuple{Union{Array, NCDatasets.CFVariable, NetCDF.NcVar},NCvar}","page":"NCTiles.jl Package Documentation","title":"NCTiles.addData","text":"addData(v::Union{NCDatasets.CFVariable,NetCDF.NcVar},var::NCvar)\n\nFill variable with data in netcdf file using either NCDatasets.jl or NetCDF.jl\n\n\n\n\n\n","category":"method"},{"location":"#NCTiles.addDim-Tuple{NCDatasets.NCDataset,NCvar}","page":"NCTiles.jl Package Documentation","title":"NCTiles.addDim","text":"addDim(ds::NCDatasets.Dataset,dimvar::NCvar) # NCDatasets\n\nAdd a dimension to a NCDatasets.Dataset\n\n\n\n\n\n","category":"method"},{"location":"#NCTiles.addDim-Tuple{NCvar}","page":"NCTiles.jl Package Documentation","title":"NCTiles.addDim","text":"addDim(dimvar::NCvar)\n\nAdd a dimension to a NetCDF file using NetCDF.jl\n\n\n\n\n\n","category":"method"},{"location":"#NCTiles.addDimData-Tuple{Any,NCvar}","page":"NCTiles.jl Package Documentation","title":"NCTiles.addDimData","text":"addDimData(v::Union{NCDatasets.CFVariable,NetCDF.NcVar,Array},var::NCvar)\n\nAdd dimension data to predefined dimensions in a NetCDF file.\n\n\n\n\n\n","category":"method"},{"location":"#NCTiles.addVar-Tuple{NCDatasets.NCDataset,NCvar}","page":"NCTiles.jl Package Documentation","title":"NCTiles.addVar","text":"addVar(ds::NCDatasets.Dataset,field::NCvar)\n\nAdd a variable to a NetCDF file using NCDatasets.jl\n\n\n\n\n\n","category":"method"},{"location":"#NCTiles.addVar-Tuple{NCvar,Array{NetCDF.NcDim,N} where N}","page":"NCTiles.jl Package Documentation","title":"NCTiles.addVar","text":"addVar(field::NCvar,dimlist::Array{NetCDF.NcDim})\n\nAdd a variable with dimensions dimlist to a NetCDF file using NetCDF.jl\n\n\n\n\n\n","category":"method"},{"location":"#NCTiles.addVar-Tuple{NCvar}","page":"NCTiles.jl Package Documentation","title":"NCTiles.addVar","text":"addVar(field::NCvar})\n\nAdd a variable and its dimensions to a NetCDF file using NetCDF.jl\n\n\n\n\n\n","category":"method"},{"location":"#NCTiles.createfile","page":"NCTiles.jl Package Documentation","title":"NCTiles.createfile","text":"createfile(filename, field::Union{NCvar,Dict{String,NCvar}}, README;\n            fillval=NaN, missval=NaN, itile=1, ntile=1)\n\nCreate NetCDF file and add variable + dimension definitions using either NCDatasets.jl or NetCDF.jl\n\n\n\n\n\n","category":"function"},{"location":"#NCTiles.readbin","page":"NCTiles.jl Package Documentation","title":"NCTiles.readbin","text":"readbin(fname::String,prec::Type,iosize::Tuple,fldidx=1)\n\nRead in a binary file to an Array.\n\n\n\n\n\n","category":"function"},{"location":"#NCTiles.readbin","page":"NCTiles.jl Package Documentation","title":"NCTiles.readbin","text":"readbin(flddata::BinData,tidx=1)\n\nRead in a binary file as an array as specified by BinData\n\n\n\n\n\n","category":"function"},{"location":"#NCTiles.readncfile","page":"NCTiles.jl Package Documentation","title":"NCTiles.readncfile","text":"readncfile(fname,backend::Module=NCDatasets)\n\nRead in a NetCDF file and return variables/dimensions as NCvar structs, and     file attributes as Dict. Large variables/dimensions are not loaded into     memory. This can use either NCDatasets.jl or NetCDF.jl\n\n\n\n\n\n","category":"function"}]
}
